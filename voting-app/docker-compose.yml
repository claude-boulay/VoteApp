services:
  node:
    build:
      context: ./result
      dockerfile: Dockerfile
    ports:
      - 8888:8888
    networks: 
      - vote
    depends_on:
      - postgres
    volumes:
      - result:/app/result
    deploy:
      replicas: 2  
      restart_policy:
        condition: on-failure
  python:
    build:
      context: ./vote
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - redis
      - postgres
    networks:
      - vote
    deploy:
      replicas: 2  
      restart_policy:
        condition: on-failure
  redis:
    image: redis:alpine
    networks:
      - vote
    volumes:
      - redis_data:/data
    deploy:
      replicas: 2 
      restart_policy:
        condition: on-failure
  postgres:
    image: postgres:12
    environment:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: postgres 
      POSTGRES_DB: postgres 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vote
    deploy:
      replicas: 2 
      restart_policy:
        condition: on-failure
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
    ports:
      - 5000:5000
    networks:
      - vote
    deploy:
      replicas: 2  
      restart_policy:
        condition: on-failure
networks:
  vote:
    driver: overlay
volumes:
  redis_data:
  postgres_data:
  result: